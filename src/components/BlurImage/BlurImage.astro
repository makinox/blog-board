---
import { Image } from "astro:assets";

interface Props {
  src: string;
  alt: string;
  class?: string;
  width?: number;
  height?: number;
  quality?: number;
  placeholderQuality?: number;
  loading?: "lazy" | "eager";
  blurAmount?: number;
  transitionDuration?: number;
  fallbackDelay?: number;
}

const { 
  src, 
  alt, 
  class: className = "", 
  width = 600, 
  height = 400,
  quality = 85,
  placeholderQuality = 20,
  loading = "lazy",
  blurAmount = 8,
  transitionDuration = 500,
  fallbackDelay = 2000
} = Astro.props;
---

<div class={`relative overflow-hidden ${className}`}>
  <div class="absolute inset-0 bg-gradient-to-br from-gray-200 via-gray-300 to-gray-200 dark:from-gray-700 dark:via-gray-600 dark:to-gray-700 animate-pulse rounded-lg"></div>
  
  <Image
    src={src}
    alt={alt}
    width={width}
    height={height}
    format="webp"
    quality={placeholderQuality}
    loading={loading}
    decoding="async"
    class="absolute inset-0 w-full h-full object-cover opacity-0 transition-all duration-400 ease-out"
    style={`filter: blur(${blurAmount}px) brightness(0.9); transform: scale(1.02);`}
  />
  
  <Image
    src={src}
    alt={alt}
    width={width}
    height={height}
    format="webp"
    quality={quality}
    loading={loading}
    decoding="async"
    class="absolute inset-0 w-full h-full object-cover opacity-0 transition-all duration-700 ease-out"
  />
</div>

<script is:inline define:vars={{ transitionDuration, fallbackDelay, blurAmount }}>
  (() => {
    const imageContainers = document.querySelectorAll(".relative.overflow-hidden");
    
    imageContainers.forEach(container => {
      const images = container.querySelectorAll("img");
      const placeholder = images[0];
      const mainImage = images[1];
      
      if (placeholder && mainImage) {
        const handleLoad = () => {
          mainImage.style.opacity = "1";
          
          setTimeout(() => {
            placeholder.style.opacity = "0";
            placeholder.style.filter = "none";
            placeholder.style.transform = "none";
          }, 150);
          
          setTimeout(() => {
            if (placeholder.parentNode) {
              placeholder.parentNode.removeChild(placeholder);
            }
          }, transitionDuration);
        };
        
        const handleError = () => {
          placeholder.style.opacity = "1";
          placeholder.style.filter = `blur(${blurAmount / 2}px) brightness(0.95)`;
          placeholder.style.transform = "none";
        };
        
        if (mainImage.complete && mainImage.naturalHeight !== 0) {
          handleLoad();
        } else {
          mainImage.addEventListener("load", handleLoad, { once: true });
          mainImage.addEventListener("error", handleError, { once: true });
        }
        
        setTimeout(() => {
          if (mainImage.style.opacity === "0" || mainImage.style.opacity === "") {
            placeholder.style.opacity = "1";
            placeholder.style.filter = `blur(${blurAmount * 0.75}px) brightness(0.9)`;
          }
        }, fallbackDelay);
      }
    });
  })();
</script> 