---
import { type CollectionEntry, getCollection } from "astro:content";
import { Image } from "astro:assets";

import FormattedDate from "@components/FormattedDate/FormattedDate.astro";
import CustomImage from "@components/CustomImage/CustomImage.astro";
import PostFooter from "@components/PostFooter/PostFooter.astro";
import TagsFooter from "@components/TagsFooter/TagsFooter.astro";
import Container from "@components/Container/Container.astro";
import Footer from "@components/Footer/Footer.astro";
import RelatedPosts from "@components/RelatedPosts/RelatedPosts.astro";

import PageLayout from "@layouts/PageLayout.astro";

import { readingTime } from "@lib/utils";

export async function getStaticPaths() {
  const posts = (await getCollection("blog"))
    .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: post,
  }));
}
type Props = CollectionEntry<"blog">;

const post = Astro.props;
const { Content } = await post.render();
const components = { img: CustomImage };

const allPosts = await getCollection("blog");
const relatedPosts = allPosts
  .filter(p => p.slug !== post.slug)
  .filter(p => {
    const commonTags = post.data.tags.filter(tag => p.data.tags.includes(tag));
    return commonTags.length > 0;
  })
  .sort((a, b) => {
    const aCommonTags = post.data.tags.filter(tag => a.data.tags.includes(tag)).length;
    const bCommonTags = post.data.tags.filter(tag => b.data.tags.includes(tag)).length;
    return bCommonTags - aCommonTags;
  })
  .slice(0, 3);
const cleanedRelatedPosts = relatedPosts.map((post) => ({
  slug: post.slug,
  data: {
    title: post.data.title,
  },
}));
---

<PageLayout title={post.data.title} description={post.data.title} slug={post.slug}>
  <div class="h-32 sm:h-52 lg:h-80  w-full my-14">
    <Image class="w-full h-full object-cover" src={post.data.timage} alt={post.data.title} height={128} width={320} format="webp"/>
  </div>
  <Container>
    <section class="space-y-1 my-10">
      <div class="animate flex items-center gap-1.5">
        <div class="font-base text-sm">
          <FormattedDate date={post.data.date} />
        </div>
        &bull;
        <div class="font-base text-sm">
          {readingTime(post.body)}
        </div>
      </div>
      <div class="animate text-2xl font-semibold text-black dark:text-white">
        {post.data.title}
      </div>
    </section>
    <article class="animate overflow-hidden break-words article">
      <Content components={components} />
    </article>
    
    <TagsFooter tags={post.data.tags} />
    <PostFooter post={post} />
    <RelatedPosts relatedPosts={cleanedRelatedPosts} />
    
    <Footer />
    
  </Container>
</PageLayout>